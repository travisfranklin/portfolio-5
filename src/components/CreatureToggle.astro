---
import Icon from './Icon.astro';

const { class: className } = Astro.props;
---

<button
    id="creature-toggle"
    class:list={[
        'w-11 h-11 inline-flex items-center justify-center rounded-full transition duration-300 hover:text-primary',
        'creature-toggle-btn',
        className
    ]}
    aria-label="Toggle creature animation"
    title="Toggle creature animation"
>
    <Icon icon="creature" class="w-5 h-5 fill-current overflow-visible creature-icon" />
</button>

<style>
    @reference "tailwindcss";

    .creature-toggle-btn {
        position: relative;
    }

    /* Hide the toggle when user prefers reduced motion */
    @media (prefers-reduced-motion: reduce) {
        #creature-toggle {
            display: none;
        }
    }

    /* Active state styling */
    .creature-toggle-btn.active {
        color: var(--color-primary);
    }

    /* Inactive state styling */
    .creature-toggle-btn.inactive {
        opacity: 0.5;
    }

    /* Icon animation for active state */
    :global(#creature-toggle.active svg) {
        animation: creaturePulse 2s ease-in-out infinite;
        transform-origin: center;
    }

    @keyframes creaturePulse {
        0%, 100% {
            opacity: 0.6;
            transform: scale(1);
        }
        50% {
            opacity: 1;
            transform: scale(1.1);
        }
    }

    /* Respect reduced motion preference for animations */
    @media (prefers-reduced-motion: reduce) {
        :global(#creature-toggle.active svg) {
            animation: none;
            transform: none;
        }
    }
</style>

<script>
    function initCreatureToggle() {
        // Check if user prefers reduced motion
        const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

        // If user prefers reduced motion, don't initialize the toggle
        if (prefersReducedMotion) {
            // Dispatch event to disable creature animations
            window.dispatchEvent(new CustomEvent('creature-toggle', {
                detail: { active: false }
            }));
            return;
        }

        const toggleBtn = document.getElementById('creature-toggle');
        if (!toggleBtn) return;

        // Get initial state from localStorage or default to true
        let isCreatureActive = localStorage.getItem('creature-active') !== 'false';

        // Set initial button state
        updateButtonState(isCreatureActive);

        // Dispatch initial state to creature component
        window.dispatchEvent(new CustomEvent('creature-toggle', {
            detail: { active: isCreatureActive }
        }));

        toggleBtn.addEventListener('click', () => {
            isCreatureActive = !isCreatureActive;
            updateButtonState(isCreatureActive);

            // Save state to localStorage
            localStorage.setItem('creature-active', isCreatureActive.toString());

            // Dispatch event to creature component
            window.dispatchEvent(new CustomEvent('creature-toggle', {
                detail: { active: isCreatureActive }
            }));
        });

        function updateButtonState(active: boolean) {
            if (active) {
                toggleBtn.classList.remove('inactive');
                toggleBtn.classList.add('active');
                toggleBtn.setAttribute('aria-label', 'Disable creature animation');
                toggleBtn.setAttribute('title', 'Disable creature animation');
            } else {
                toggleBtn.classList.remove('active');
                toggleBtn.classList.add('inactive');
                toggleBtn.setAttribute('aria-label', 'Enable creature animation');
                toggleBtn.setAttribute('title', 'Enable creature animation');
            }
        }
    }

    // Initialize on page load
    initCreatureToggle();

    // Re-initialize after page transitions (for Astro view transitions)
    document.addEventListener('astro:after-swap', initCreatureToggle);
</script>
